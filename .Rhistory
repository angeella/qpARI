roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(qpARI)
library(pARI)
roxygen2::roxygenise()
library(qpARI)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 100, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test
system.time(out <- signTest(X = X))
#Compute sign test
system.time(out <- signTest(X = X, rand = T))
#Compute sign test qpARI
system.time(out <- signFlipQuantile(X = X))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 100, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test pARI
system.time(out <- signTest(X = X, rand = T))
#Compute sign test qpARI
system.time(out <- signTestQuantile(X = X, rand = T))
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 100, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test pARI
system.time(out <- signTest(X = X, rand = T))
#Compute sign test qpARI
system.time(out <- signTestQuantile(X = X, rand = T))
roxygen2::roxygenise()
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 100, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test qpARI
system.time(out <- signTestQuantile(X = X, rand = T))
m <- 100
n <- 10
B <- 200
X <- matrix(rnorm(m*n), ncol=n)
set.seed(123)
Test <- signFlipQuantile(X, B)
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 100, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test pARI
system.time(out <- signTest(X = X, rand = T))
#Compute sign test qpARI
system.time(out <- signTestQuantile(X = X, rand = T))
#Compute sign test qpARI
object.size(out <- signTestQuantile(X = X, rand = T))
#Compute sign test pARI
object.size(out <- signTest(X = X, rand = T))
plot(out$Test_H0)
plot(density(out$Test_H0))
#Compute sign test qpARI
object.size(out <- signTestQuantile(X = X, rand = T))
plot(density(out$Test_H0))
#Compute sign test pARI
object.size(out <- signTest(X = X, rand = T,seed = 123))
plot(density(out$Test_H0))
#Compute sign test qpARI
object.size(out <- signTestQuantile(X = X, rand = T,seed = 123))
plot(density(out$Test_H0))
dim(out$Test_H0)
X <- simulateData(pi0 = 0.8, m = 10000, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test pARI
object.size(out <- signTest(X = X, rand = T,seed = 123))
plot(density(out$Test_H0))
dim(out$Test_H0)
#Compute sign test qpARI
object.size(out1 <- signTestQuantile(X = X, rand = T,seed = 123))
160001024 > 16073024
160001024 - 16073024
dim(out1$Test_H0)
dim(out1$Test)
dim(out1)
length(out1$Test)
dim(pv)
dim(out$pv)
dim(out$pv_H0)
alternative_set <- c("two.sided", "greater", "lower")
alternative = "two.sided"
alternative <- match.arg(tolower(alternative), alternative_set)
## number of obeservation
n <- ncol(X)
# number of variables
m <- nrow(X)
## Observed test statistics
rowV <- rowVariance(X)
Test <- ifelse(rowV==0,0, rowMeans(X)/(sqrt((rowV)/n)))
t_obs <- ifelse(rowV==0,0, rowMeans(X)/(sqrt((rowV)/n)))
Test_H0 <- signFlipQuantile(X,B)
library(Rcpp)
sourceCpp("src/signFlipQuantile.cpp")
Test_H0 <- signFlipQuantile(X,B)
Test_H0 <- ifelse(is.na(Test_H0), 0 , Test_H0)
Test <- stats::quantile(Test, probs = seq(from=1/(B),to=1,by = 1/(B)))
QT <- cbind(Test, Test_H0)
pv <-pvQuantile(QT = QT, Test = t_obs, B = B)
sourceCpp("src/pvQuantile.cpp")
pv <-pvQuantile(QT = QT, Test = t_obs, B = B)
pv_H0 <-sapply(c(1:m), function(x) sum(abs(t_obs[x]) <= abs(QT)))/(B*B)
library(qpARI)
library(pARI)
X <- simulateData(pi0 = 0.8, m = 10000, n = 20,
rho = 0, seed = 123,power = 0.8,alpha = 0.05)
#Compute sign test pARI
obj <- object.size(out <- signTest(X = X, rand = T,seed = 123)) #160001024 bytes
obj
plot(density(out$Test_H0))
dim(out$Test_H0)
#Compute sign test qpARI
obj1 <- object.size(out1 <- signTestQuantile(X = X, rand = T,seed = 123)) #16073024 bytes
#Compute sign test qpARI
obj1 <- object.size(out1 <- signTestQuantile(X = X, seed = 123)) #16073024 bytes
obj1
plot(density(out1$Test_H0))
plot(out1$pv_H0)
#Compute lambda
lambda1 <- lambdaOpt(pvalues = cbind(out$pv, out$pv_H0),family = "simes",alpha = 0.05,
delta = 0,step.down = F, max.step = 10, m = 10000)
#Compute lambda
system.time(lambda1 <- lambdaOpt(pvalues = cbind(out$pv, out$pv_H0),family = "simes",alpha = 0.05,
delta = 0,step.down = F, max.step = 10, m = 10000))
system.time(lambda1 <- lambdaOptQuantile(pvalues = out1$pv,
family = "simes",alpha = 0.05,
delta = 0))
system.time(lambda1 <- lambdaOptQuantile(pvalues = out1$pv,
family = "simes",alpha = 0.05))
lambda1
lambda1
#Compute lambda
system.time(lambda <- lambdaOpt(pvalues = cbind(out$pv, out$pv_H0),family = "simes",alpha = 0.05,
delta = 0,step.down = F, max.step = 10, m = 10000))
lambda
system.time(lambda1 <- lambdaOptQuantile(pvalues = out1$pv,
family = "simes",alpha = 0.05))
lambda1
out1$pv
plot(out1$pv
)
plot(out$pv)
out$pv == out1$pv
out$pv - out1$pv
#Compute lambda
system.time(lambda <- lambdaOpt(pvalues = cbind(out$pv, out$pv_H0),family = "simes",alpha = 0.05,
delta = 0,step.down = F, max.step = 10, m = 10000))
#Compute lambda
object.size(lambda <- lambdaOpt(pvalues = cbind(out$pv, out$pv_H0),family = "simes",alpha = 0.05,
delta = 0,step.down = F, max.step = 10, m = 10000)) #0.61
object.size(lambda1 <- lambdaOptQuantile(pvalues = out1$pv,
family = "simes",alpha = 0.05))
system.time(lambda1 <- lambdaOptQuantile(pvalues = out1$pv,
family = "simes",alpha = 0.05))
cite()
cite("R")
