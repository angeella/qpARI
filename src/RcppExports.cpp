// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// permTQuantile
arma::mat permTQuantile(arma::mat X, double B, arma::vec label);
RcppExport SEXP _qpARI_permTQuantile(SEXP XSEXP, SEXP BSEXP, SEXP labelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type label(labelSEXP);
    rcpp_result_gen = Rcpp::wrap(permTQuantile(X, B, label));
    return rcpp_result_gen;
END_RCPP
}
// pvQuantile
NumericVector pvQuantile(NumericMatrix QT, NumericVector Test, long double B);
RcppExport SEXP _qpARI_pvQuantile(SEXP QTSEXP, SEXP TestSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type QT(QTSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Test(TestSEXP);
    Rcpp::traits::input_parameter< long double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(pvQuantile(QT, Test, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _qpARI_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _qpARI_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _qpARI_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _qpARI_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSortC
arma::mat rowSortC(arma::mat X);
RcppExport SEXP _qpARI_rowSortC(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSortC(X));
    return rcpp_result_gen;
END_RCPP
}
// signFlipQuantile
arma::mat signFlipQuantile(arma::mat X, double B);
RcppExport SEXP _qpARI_signFlipQuantile(SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(signFlipQuantile(X, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qpARI_permTQuantile", (DL_FUNC) &_qpARI_permTQuantile, 3},
    {"_qpARI_pvQuantile", (DL_FUNC) &_qpARI_pvQuantile, 3},
    {"_qpARI_rcpparma_hello_world", (DL_FUNC) &_qpARI_rcpparma_hello_world, 0},
    {"_qpARI_rcpparma_outerproduct", (DL_FUNC) &_qpARI_rcpparma_outerproduct, 1},
    {"_qpARI_rcpparma_innerproduct", (DL_FUNC) &_qpARI_rcpparma_innerproduct, 1},
    {"_qpARI_rcpparma_bothproducts", (DL_FUNC) &_qpARI_rcpparma_bothproducts, 1},
    {"_qpARI_rowSortC", (DL_FUNC) &_qpARI_rowSortC, 1},
    {"_qpARI_signFlipQuantile", (DL_FUNC) &_qpARI_signFlipQuantile, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_qpARI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
